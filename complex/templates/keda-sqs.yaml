{{- range $componentName, $component := .Values.components -}}
{{- if and (eq $component.type "consumer") (not (empty $component.keda)) (eq $component.keda.type "sqs") -}}

{{- /* validate missing variables */ -}}
{{- if (not $component.keda.sqs.queueURLFromEnv) -}}
{{- fail (printf "KEDA SQS consumer '%s': missing required environment variable(s). Please define 'queueURLFromEnv' in values.yaml" $componentName) -}}
{{- end -}}
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: {{ include "component.name" (dict "name" $componentName "Release" $.Release) }}-sqs
spec:
  cooldownPeriod: {{ $component.keda.cooldownPeriod | default 30 }}
  minReplicaCount: {{ if not (kindIs "invalid" $component.keda.minReplicaCount) }}{{ $component.keda.minReplicaCount }}{{ else }}{{ 0 }}{{ end }}
  maxReplicaCount: {{ $component.keda.maxReplicaCount | default 1 }}
  pollingInterval: {{ $component.keda.pollingInterval | default 15 }}
  scaleTargetRef:
    name: {{ include "component.name" (dict "name" $componentName "Release" $.Release) }}
  triggers:
  - type: aws-sqs-queue
    {{ if not (eq ($component.keda.sqs.identityOwner | default "operator") "operator") -}}
    authenticationRef:
      name: {{ $componentName }}-auth
    {{ end -}}
    metadata:
      awsRegion: {{ $component.keda.sqs.awsRegion | default $.Values.global.keda.awsRegion | quote }}
      {{- if $component.keda.sqs.activationThreshold }}
      activationThreshold: {{ $component.keda.sqs.activationThreshold | default "1" | quote }}
      {{- end }}
      queueLength: {{ $component.keda.sqs.queueLength | default 1 | quote }}
      queueURLFromEnv: {{ $component.keda.sqs.queueURLFromEnv }}
      identityOwner: {{ $component.keda.sqs.identityOwner | default "operator" }}
{{ end -}}
{{- end -}}
